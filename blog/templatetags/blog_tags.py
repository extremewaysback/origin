#blog_tags.py
# A file containing custom tags in templates
# Before using custom tempalte tags, you have to make them available for the template using the {% load %} tag.

from django import template
#Each template tags module needs to contain a variable called register to be a valid tag library.
#This variable is an instance of template.Library and it's used to register your own template tags and filters.
register=template.Library()

from ..models import Post

#process data and return the string and register it
#you can do it by specifying a name attribute like register.simple_tag(name='my_tag')
@register.simple_tag
def total_posts():
    '''Retrieve all the posts published return a string'''
    return Post.objects.filter(status='published').count()
    

#The template tag we just created can be used passing the optional number of comments to display like {% show_latest_posts 3 %}
@register.inclusion_tag('blog/post/latest_posts.html')
def show_latest_posts(count=5):
    latest_posts=Post.objects.filter(status='published').order_by('-publish')[:count]
    return {'latest_posts':latest_posts}
    
from django.db.models import Count


#build a QuerySet aggregating the total number of comments for each post in a total_comments field and ordered by this field
@register.assignment_tag
def get_most_commented_posts(count=5):
    return Post.objects.filter(status='published').annotate(total_comments=Count('comments')).order_by('-total_comments')[:count]
    #Use the Post-->Comment(related_name=comments) reverse foreign key hop.
    
    
from django.utils.safestring import mark_safe
import markdown

#Markdown is a plain text formatting syntax that is very simple to use and it's intended to be converted into HTML.
#Django escapses the HTML code generated by filters.
@register.filter(name='markdown')#avoid name collision, name the filter markdown for usage
def markdown_format(text):
    return mark_safe(markdown.markdown(text))
    # The mark_safe provided by django to mark the results as safe HTML to be rendered in the template.
    # By default, django will not trust any HTML code and will escape it before placing it into the output.
    # The only exception are variables that are marked safe form escaping.
    
